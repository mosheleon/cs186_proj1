package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    //The predicate to use to join the children
    private JoinPredicate p;    
    //Iterator for the left(outer) relation to join
    private DbIterator child1;
    //Iterator for the right(inner) relation to join
    private DbIterator child2;
    
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
    	this.p = p;
    	this .child1 = child1;
    	this.child2 = child2;    	   			
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
    	int tempFieldNum = p.getField1();
    	TupleDesc tempTD = this.child1.getTupleDesc();
    	String toReturn = tempTD.getFieldName(tempFieldNum);
    	return toReturn;
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
    	int tempFieldNum = p.getField2();
    	TupleDesc tempTD = this.child2.getTupleDesc();
    	String toReturn = tempTD.getFieldName(tempFieldNum);
    	return toReturn;
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
    	TupleDesc td1 = child1.getTupleDesc();
    	TupleDesc td2 = child2.getTupleDesc();
        TupleDesc mergeTD = TupleDesc.merge(td1, td2);
    	return mergeTD;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	super.open();
    	child1.open();
    	child2.open();
    }

    public void close() {
        // some code goes here
    	child1.close();
    	child2.close();
    	super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	child1.rewind();
    	child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    
    private boolean canIncrementChild1 = true;
    private boolean incrementChild1 = true;
    private Tuple temp1 = null;
    
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here    	
    	// will not enter only if both child1 and child 2 have no next()
    	if(incrementChild1){
    		canIncrementChild1 = child1.hasNext();
    	}
    	while(canIncrementChild1){
    		if(incrementChild1){
    			temp1 = child1.next();
    		}    		  		    		
    		while(child2.hasNext()){    			
    			Tuple temp2 = child2.next();
    			    			   			
    			boolean answer = p.filter(temp1, temp2);
    			
    			if(answer){
    				incrementChild1 = false;
    				
    				int size1 = temp1.getTupleDesc().numFields();
    				int size2 = temp2.getTupleDesc().numFields();
    				TupleDesc td = getTupleDesc(); //TupleDesc.merge(td1, td2);
    				Tuple t = new Tuple(td);
    				
    				for(int i = 0 ; i < size1 ; i++){
    					t.setField(i, temp1.getField(i));
    				}
    				for(int j = 0 ; j < size2 ; j++){
    					t.setField(j+size1, temp2.getField(j));
    				}
    				return t;
        		}     		
    		}
    		canIncrementChild1 = child1.hasNext();
    		child2.rewind();
    		incrementChild1 = true;    		    		   		
    	}
        return null;
    }

    /**
     * @return return the children DbIterators of this operator. If there is
     *         only one child, return an array of only one element. For join
     *         operators, the order of the children is not important. But they
     *         should be consistent among multiple calls.
     * */
    @Override
    public DbIterator[] getChildren() {
        // some code goes here
    	//Making an array with enough room for 2 elements
    	DbIterator[] toReturn = new DbIterator[2];
    	toReturn[0] = child1;
    	toReturn[1] = child2;
        return toReturn;
    }

    /**
     * Set the children(child) of this operator. If the operator has only one
     * child, children[0] should be used. If the operator is a join, children[0]
     * and children[1] should be used.
     * 
     * 
     * @param children
     *            the DbIterators which are to be set as the children(child) of
     *            this operator
     * */
    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    	child1 = children[0];
    	child2 = children[1];
    }

}
